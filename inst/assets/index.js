(()=>{"use strict";Shiny;let t={};Shiny.addCustomMessageHandler("communicate-set-path",(n=>{t[n.id]=n,async function(n,o={}){const a=e(n,o),r=await fetch(`${t[n].path}&${a}`);return await r.json()}(n.id,{x:[1,2,3]}).then((t=>{console.log(t),console.log(typeof t)}))}));const e=(e,n)=>{const r=t[e].args;return Object.keys(n).map((t=>{let e=n[t];const i=r.find((e=>e.name===t));if(!i)throw new Error(`Invalid argument: ${t}, not handled by R function`);if(!a(e,i))throw new Error(`Invalid argument: ${t}, type mismatch, expected ${i.type}, got ${typeof e}`);return e=o(e),`${t}=${encodeURIComponent(e)}`})).join("&")},n=t=>t instanceof Date,o=t=>(n(t)||"object"==typeof t&&(t=JSON.stringify(t)),t),a=(t,e)=>!e.type||!(!n(t)||"date"!==e.type)||!(!n(t)||"posix"!==e.type)||"object"==typeof t&&"dataframe"===e.type||"object"==typeof t&&"list"===e.type||"number"==typeof t&&"numeric"===e.type||"number"==typeof t&&"integer"===e.type||"string"==typeof t&&"character"===e.type})();